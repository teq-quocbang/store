// Code generated by mockery v2.36.0. DO NOT EDIT.

package account

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/teq-quocbang/store/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) CreateAccount(_a0 context.Context, _a1 *model.Account) (uint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) (uint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Account) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.Account
func (_e *MockRepository_Expecter) CreateAccount(_a0 interface{}, _a1 interface{}) *MockRepository_CreateAccount_Call {
	return &MockRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0, _a1)}
}

func (_c *MockRepository_CreateAccount_Call) Run(run func(_a0 context.Context, _a1 *model.Account)) *MockRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Account))
	})
	return _c
}

func (_c *MockRepository_CreateAccount_Call) Return(ID uint, err error) *MockRepository_CreateAccount_Call {
	_c.Call.Return(ID, err)
	return _c
}

func (_c *MockRepository_CreateAccount_Call) RunAndReturn(run func(context.Context, *model.Account) (uint, error)) *MockRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerifyAccount provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) CreateVerifyAccount(_a0 context.Context, _a1 *model.AccountVerify) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AccountVerify) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateVerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerifyAccount'
type MockRepository_CreateVerifyAccount_Call struct {
	*mock.Call
}

// CreateVerifyAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.AccountVerify
func (_e *MockRepository_Expecter) CreateVerifyAccount(_a0 interface{}, _a1 interface{}) *MockRepository_CreateVerifyAccount_Call {
	return &MockRepository_CreateVerifyAccount_Call{Call: _e.mock.On("CreateVerifyAccount", _a0, _a1)}
}

func (_c *MockRepository_CreateVerifyAccount_Call) Run(run func(_a0 context.Context, _a1 *model.AccountVerify)) *MockRepository_CreateVerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AccountVerify))
	})
	return _c
}

func (_c *MockRepository_CreateVerifyAccount_Call) Return(_a0 error) *MockRepository_CreateVerifyAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateVerifyAccount_Call) RunAndReturn(run func(context.Context, *model.AccountVerify) error) *MockRepository_CreateVerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByConstraint provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetAccountByConstraint(_a0 context.Context, _a1 *model.Account) (*model.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) (*model.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) *model.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Account) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAccountByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByConstraint'
type MockRepository_GetAccountByConstraint_Call struct {
	*mock.Call
}

// GetAccountByConstraint is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.Account
func (_e *MockRepository_Expecter) GetAccountByConstraint(_a0 interface{}, _a1 interface{}) *MockRepository_GetAccountByConstraint_Call {
	return &MockRepository_GetAccountByConstraint_Call{Call: _e.mock.On("GetAccountByConstraint", _a0, _a1)}
}

func (_c *MockRepository_GetAccountByConstraint_Call) Run(run func(_a0 context.Context, _a1 *model.Account)) *MockRepository_GetAccountByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Account))
	})
	return _c
}

func (_c *MockRepository_GetAccountByConstraint_Call) Return(_a0 *model.Account, _a1 error) *MockRepository_GetAccountByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAccountByConstraint_Call) RunAndReturn(run func(context.Context, *model.Account) (*model.Account, error)) *MockRepository_GetAccountByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByID provides a mock function with given fields: ctx, studentID
func (_m *MockRepository) GetAccountByID(ctx context.Context, studentID uint) (*model.Account, error) {
	ret := _m.Called(ctx, studentID)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*model.Account, error)); ok {
		return rf(ctx, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.Account); ok {
		r0 = rf(ctx, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByID'
type MockRepository_GetAccountByID_Call struct {
	*mock.Call
}

// GetAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID uint
func (_e *MockRepository_Expecter) GetAccountByID(ctx interface{}, studentID interface{}) *MockRepository_GetAccountByID_Call {
	return &MockRepository_GetAccountByID_Call{Call: _e.mock.On("GetAccountByID", ctx, studentID)}
}

func (_c *MockRepository_GetAccountByID_Call) Run(run func(ctx context.Context, studentID uint)) *MockRepository_GetAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_GetAccountByID_Call) Return(_a0 *model.Account, _a1 error) *MockRepository_GetAccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAccountByID_Call) RunAndReturn(run func(context.Context, uint) (*model.Account, error)) *MockRepository_GetAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: _a0
func (_m *MockRepository) GetList(_a0 context.Context) ([]model.Account, error) {
	ret := _m.Called(_a0)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockRepository_Expecter) GetList(_a0 interface{}) *MockRepository_GetList_Call {
	return &MockRepository_GetList_Call{Call: _e.mock.On("GetList", _a0)}
}

func (_c *MockRepository_GetList_Call) Run(run func(_a0 context.Context)) *MockRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetList_Call) Return(_a0 []model.Account, _a1 error) *MockRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetList_Call) RunAndReturn(run func(context.Context) ([]model.Account, error)) *MockRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerifyAccountByID provides a mock function with given fields: ctx, studentID
func (_m *MockRepository) GetVerifyAccountByID(ctx context.Context, studentID uint) (*model.AccountVerify, error) {
	ret := _m.Called(ctx, studentID)

	var r0 *model.AccountVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*model.AccountVerify, error)); ok {
		return rf(ctx, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.AccountVerify); ok {
		r0 = rf(ctx, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetVerifyAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerifyAccountByID'
type MockRepository_GetVerifyAccountByID_Call struct {
	*mock.Call
}

// GetVerifyAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID uint
func (_e *MockRepository_Expecter) GetVerifyAccountByID(ctx interface{}, studentID interface{}) *MockRepository_GetVerifyAccountByID_Call {
	return &MockRepository_GetVerifyAccountByID_Call{Call: _e.mock.On("GetVerifyAccountByID", ctx, studentID)}
}

func (_c *MockRepository_GetVerifyAccountByID_Call) Run(run func(ctx context.Context, studentID uint)) *MockRepository_GetVerifyAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockRepository_GetVerifyAccountByID_Call) Return(_a0 *model.AccountVerify, _a1 error) *MockRepository_GetVerifyAccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetVerifyAccountByID_Call) RunAndReturn(run func(context.Context, uint) (*model.AccountVerify, error)) *MockRepository_GetVerifyAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
