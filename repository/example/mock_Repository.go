// Code generated by mockery v2.36.0. DO NOT EDIT.

package example

import (
	context "context"

	codetype "github.com/teq-quocbang/store/codetype"

	mock "github.com/stretchr/testify/mock"

	model "github.com/teq-quocbang/store/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockRepository) Create(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Example
func (_e *MockRepository_Expecter) Create(ctx interface{}, data interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, data *model.Example)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Example))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Example) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type MockRepository_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - data []model.Example
func (_e *MockRepository_Expecter) CreateList(ctx interface{}, data interface{}) *MockRepository_CreateList_Call {
	return &MockRepository_CreateList_Call{Call: _e.mock.On("CreateList", ctx, data)}
}

func (_c *MockRepository_CreateList_Call) Run(run func(ctx context.Context, data []model.Example)) *MockRepository_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Example))
	})
	return _c
}

func (_c *MockRepository_CreateList_Call) Return(_a0 error) *MockRepository_CreateList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateList_Call) RunAndReturn(run func(context.Context, []model.Example) error) *MockRepository_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdate provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateOrUpdate(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockRepository_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Example
func (_e *MockRepository_Expecter) CreateOrUpdate(ctx interface{}, data interface{}) *MockRepository_CreateOrUpdate_Call {
	return &MockRepository_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, data)}
}

func (_c *MockRepository_CreateOrUpdate_Call) Run(run func(ctx context.Context, data *model.Example)) *MockRepository_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Example))
	})
	return _c
}

func (_c *MockRepository_CreateOrUpdate_Call) Return(_a0 error) *MockRepository_CreateOrUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, *model.Example) error) *MockRepository_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateOrUpdateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateOrUpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateList'
type MockRepository_CreateOrUpdateList_Call struct {
	*mock.Call
}

// CreateOrUpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - data []model.Example
func (_e *MockRepository_Expecter) CreateOrUpdateList(ctx interface{}, data interface{}) *MockRepository_CreateOrUpdateList_Call {
	return &MockRepository_CreateOrUpdateList_Call{Call: _e.mock.On("CreateOrUpdateList", ctx, data)}
}

func (_c *MockRepository_CreateOrUpdateList_Call) Run(run func(ctx context.Context, data []model.Example)) *MockRepository_CreateOrUpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Example))
	})
	return _c
}

func (_c *MockRepository_CreateOrUpdateList_Call) Return(_a0 error) *MockRepository_CreateOrUpdateList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateOrUpdateList_Call) RunAndReturn(run func(context.Context, []model.Example) error) *MockRepository_CreateOrUpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, data, unscoped
func (_m *MockRepository) Delete(ctx context.Context, data *model.Example, unscoped bool) error {
	ret := _m.Called(ctx, data, unscoped)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example, bool) error); ok {
		r0 = rf(ctx, data, unscoped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Example
//   - unscoped bool
func (_e *MockRepository_Expecter) Delete(ctx interface{}, data interface{}, unscoped interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, data, unscoped)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, data *model.Example, unscoped bool)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Example), args[2].(bool))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(context.Context, *model.Example, bool) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, data, unscoped
func (_m *MockRepository) DeleteList(ctx context.Context, data []model.Example, unscoped bool) error {
	ret := _m.Called(ctx, data, unscoped)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example, bool) error); ok {
		r0 = rf(ctx, data, unscoped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type MockRepository_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - data []model.Example
//   - unscoped bool
func (_e *MockRepository_Expecter) DeleteList(ctx interface{}, data interface{}, unscoped interface{}) *MockRepository_DeleteList_Call {
	return &MockRepository_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, data, unscoped)}
}

func (_c *MockRepository_DeleteList_Call) Run(run func(ctx context.Context, data []model.Example, unscoped bool)) *MockRepository_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Example), args[2].(bool))
	})
	return _c
}

func (_c *MockRepository_DeleteList_Call) Return(_a0 error) *MockRepository_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteList_Call) RunAndReturn(run func(context.Context, []model.Example, bool) error) *MockRepository_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, unscoped
func (_m *MockRepository) GetAll(ctx context.Context, unscoped bool) ([]model.Example, error) {
	ret := _m.Called(ctx, unscoped)

	var r0 []model.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]model.Example, error)); ok {
		return rf(ctx, unscoped)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []model.Example); ok {
		r0 = rf(ctx, unscoped)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, unscoped)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - unscoped bool
func (_e *MockRepository_Expecter) GetAll(ctx interface{}, unscoped interface{}) *MockRepository_GetAll_Call {
	return &MockRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, unscoped)}
}

func (_c *MockRepository_GetAll_Call) Run(run func(ctx context.Context, unscoped bool)) *MockRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockRepository_GetAll_Call) Return(_a0 []model.Example, _a1 error) *MockRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAll_Call) RunAndReturn(run func(context.Context, bool) ([]model.Example, error)) *MockRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int64) (*model.Example, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Example, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Example); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(_a0 *model.Example, _a1 error) *MockRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*model.Example, error)) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByInterface provides a mock function with given fields: ctx, itf
func (_m *MockRepository) GetByInterface(ctx context.Context, itf interface{}) (*model.Example, error) {
	ret := _m.Called(ctx, itf)

	var r0 *model.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*model.Example, error)); ok {
		return rf(ctx, itf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *model.Example); ok {
		r0 = rf(ctx, itf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, itf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByInterface'
type MockRepository_GetByInterface_Call struct {
	*mock.Call
}

// GetByInterface is a helper method to define mock.On call
//   - ctx context.Context
//   - itf interface{}
func (_e *MockRepository_Expecter) GetByInterface(ctx interface{}, itf interface{}) *MockRepository_GetByInterface_Call {
	return &MockRepository_GetByInterface_Call{Call: _e.mock.On("GetByInterface", ctx, itf)}
}

func (_c *MockRepository_GetByInterface_Call) Run(run func(ctx context.Context, itf interface{})) *MockRepository_GetByInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRepository_GetByInterface_Call) Return(_a0 *model.Example, _a1 error) *MockRepository_GetByInterface_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByInterface_Call) RunAndReturn(run func(context.Context, interface{}) (*model.Example, error)) *MockRepository_GetByInterface_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, search, paginator, conditions, order
func (_m *MockRepository) GetList(ctx context.Context, search string, paginator codetype.Paginator, conditions interface{}, order []string) ([]model.Example, int64, error) {
	ret := _m.Called(ctx, search, paginator, conditions, order)

	var r0 []model.Example
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, codetype.Paginator, interface{}, []string) ([]model.Example, int64, error)); ok {
		return rf(ctx, search, paginator, conditions, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, codetype.Paginator, interface{}, []string) []model.Example); ok {
		r0 = rf(ctx, search, paginator, conditions, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, codetype.Paginator, interface{}, []string) int64); ok {
		r1 = rf(ctx, search, paginator, conditions, order)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, codetype.Paginator, interface{}, []string) error); ok {
		r2 = rf(ctx, search, paginator, conditions, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
//   - paginator codetype.Paginator
//   - conditions interface{}
//   - order []string
func (_e *MockRepository_Expecter) GetList(ctx interface{}, search interface{}, paginator interface{}, conditions interface{}, order interface{}) *MockRepository_GetList_Call {
	return &MockRepository_GetList_Call{Call: _e.mock.On("GetList", ctx, search, paginator, conditions, order)}
}

func (_c *MockRepository_GetList_Call) Run(run func(ctx context.Context, search string, paginator codetype.Paginator, conditions interface{}, order []string)) *MockRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(codetype.Paginator), args[3].(interface{}), args[4].([]string))
	})
	return _c
}

func (_c *MockRepository_GetList_Call) Return(_a0 []model.Example, _a1 int64, _a2 error) *MockRepository_GetList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRepository_GetList_Call) RunAndReturn(run func(context.Context, string, codetype.Paginator, interface{}, []string) ([]model.Example, int64, error)) *MockRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListByInterface provides a mock function with given fields: ctx, itf
func (_m *MockRepository) GetListByInterface(ctx context.Context, itf interface{}) ([]model.Example, error) {
	ret := _m.Called(ctx, itf)

	var r0 []model.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) ([]model.Example, error)); ok {
		return rf(ctx, itf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []model.Example); ok {
		r0 = rf(ctx, itf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, itf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetListByInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListByInterface'
type MockRepository_GetListByInterface_Call struct {
	*mock.Call
}

// GetListByInterface is a helper method to define mock.On call
//   - ctx context.Context
//   - itf interface{}
func (_e *MockRepository_Expecter) GetListByInterface(ctx interface{}, itf interface{}) *MockRepository_GetListByInterface_Call {
	return &MockRepository_GetListByInterface_Call{Call: _e.mock.On("GetListByInterface", ctx, itf)}
}

func (_c *MockRepository_GetListByInterface_Call) Run(run func(ctx context.Context, itf interface{})) *MockRepository_GetListByInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRepository_GetListByInterface_Call) Return(_a0 []model.Example, _a1 error) *MockRepository_GetListByInterface_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetListByInterface_Call) RunAndReturn(run func(context.Context, interface{}) ([]model.Example, error)) *MockRepository_GetListByInterface_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *MockRepository) Update(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Example
func (_e *MockRepository_Expecter) Update(ctx interface{}, data interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, data *model.Example)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Example))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Example) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) UpdateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type MockRepository_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - data []model.Example
func (_e *MockRepository_Expecter) UpdateList(ctx interface{}, data interface{}) *MockRepository_UpdateList_Call {
	return &MockRepository_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, data)}
}

func (_c *MockRepository_UpdateList_Call) Run(run func(ctx context.Context, data []model.Example)) *MockRepository_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Example))
	})
	return _c
}

func (_c *MockRepository_UpdateList_Call) Return(_a0 error) *MockRepository_UpdateList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateList_Call) RunAndReturn(run func(context.Context, []model.Example) error) *MockRepository_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
