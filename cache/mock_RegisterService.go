// Code generated by mockery v2.36.0. DO NOT EDIT.

package cache

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	presenter "github.com/teq-quocbang/store/presenter"
)

// MockRegisterService is an autogenerated mock type for the RegisterService type
type MockRegisterService struct {
	mock.Mock
}

type MockRegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterService) EXPECT() *MockRegisterService_Expecter {
	return &MockRegisterService_Expecter{mock: &_m.Mock}
}

// ClearRegisterHistories provides a mock function with given fields: ctx, registerHistoriesKey
func (_m *MockRegisterService) ClearRegisterHistories(ctx context.Context, registerHistoriesKey string) error {
	ret := _m.Called(ctx, registerHistoriesKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, registerHistoriesKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegisterService_ClearRegisterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearRegisterHistories'
type MockRegisterService_ClearRegisterHistories_Call struct {
	*mock.Call
}

// ClearRegisterHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - registerHistoriesKey string
func (_e *MockRegisterService_Expecter) ClearRegisterHistories(ctx interface{}, registerHistoriesKey interface{}) *MockRegisterService_ClearRegisterHistories_Call {
	return &MockRegisterService_ClearRegisterHistories_Call{Call: _e.mock.On("ClearRegisterHistories", ctx, registerHistoriesKey)}
}

func (_c *MockRegisterService_ClearRegisterHistories_Call) Run(run func(ctx context.Context, registerHistoriesKey string)) *MockRegisterService_ClearRegisterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRegisterService_ClearRegisterHistories_Call) Return(_a0 error) *MockRegisterService_ClearRegisterHistories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterService_ClearRegisterHistories_Call) RunAndReturn(run func(context.Context, string) error) *MockRegisterService_ClearRegisterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRegisterHistories provides a mock function with given fields: ctx, registerHistoriesKey, listRegisterResp
func (_m *MockRegisterService) CreateRegisterHistories(ctx context.Context, registerHistoriesKey string, listRegisterResp *presenter.ListRegisterResponseWrapper) error {
	ret := _m.Called(ctx, registerHistoriesKey, listRegisterResp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *presenter.ListRegisterResponseWrapper) error); ok {
		r0 = rf(ctx, registerHistoriesKey, listRegisterResp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegisterService_CreateRegisterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRegisterHistories'
type MockRegisterService_CreateRegisterHistories_Call struct {
	*mock.Call
}

// CreateRegisterHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - registerHistoriesKey string
//   - listRegisterResp *presenter.ListRegisterResponseWrapper
func (_e *MockRegisterService_Expecter) CreateRegisterHistories(ctx interface{}, registerHistoriesKey interface{}, listRegisterResp interface{}) *MockRegisterService_CreateRegisterHistories_Call {
	return &MockRegisterService_CreateRegisterHistories_Call{Call: _e.mock.On("CreateRegisterHistories", ctx, registerHistoriesKey, listRegisterResp)}
}

func (_c *MockRegisterService_CreateRegisterHistories_Call) Run(run func(ctx context.Context, registerHistoriesKey string, listRegisterResp *presenter.ListRegisterResponseWrapper)) *MockRegisterService_CreateRegisterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*presenter.ListRegisterResponseWrapper))
	})
	return _c
}

func (_c *MockRegisterService_CreateRegisterHistories_Call) Return(_a0 error) *MockRegisterService_CreateRegisterHistories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterService_CreateRegisterHistories_Call) RunAndReturn(run func(context.Context, string, *presenter.ListRegisterResponseWrapper) error) *MockRegisterService_CreateRegisterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisterHistories provides a mock function with given fields: ctx, registerHistoriesKey
func (_m *MockRegisterService) GetRegisterHistories(ctx context.Context, registerHistoriesKey string) (*presenter.ListRegisterResponseWrapper, error) {
	ret := _m.Called(ctx, registerHistoriesKey)

	var r0 *presenter.ListRegisterResponseWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*presenter.ListRegisterResponseWrapper, error)); ok {
		return rf(ctx, registerHistoriesKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *presenter.ListRegisterResponseWrapper); ok {
		r0 = rf(ctx, registerHistoriesKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*presenter.ListRegisterResponseWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, registerHistoriesKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterService_GetRegisterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterHistories'
type MockRegisterService_GetRegisterHistories_Call struct {
	*mock.Call
}

// GetRegisterHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - registerHistoriesKey string
func (_e *MockRegisterService_Expecter) GetRegisterHistories(ctx interface{}, registerHistoriesKey interface{}) *MockRegisterService_GetRegisterHistories_Call {
	return &MockRegisterService_GetRegisterHistories_Call{Call: _e.mock.On("GetRegisterHistories", ctx, registerHistoriesKey)}
}

func (_c *MockRegisterService_GetRegisterHistories_Call) Run(run func(ctx context.Context, registerHistoriesKey string)) *MockRegisterService_GetRegisterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRegisterService_GetRegisterHistories_Call) Return(_a0 *presenter.ListRegisterResponseWrapper, _a1 error) *MockRegisterService_GetRegisterHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterService_GetRegisterHistories_Call) RunAndReturn(run func(context.Context, string) (*presenter.ListRegisterResponseWrapper, error)) *MockRegisterService_GetRegisterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterService creates a new instance of MockRegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterService {
	mock := &MockRegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
